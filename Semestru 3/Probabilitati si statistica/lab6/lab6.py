# -*- coding: utf-8 -*-
"""lab6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XcKIdjUrPr7U4qwowv_7VPXft0netbJ0
"""

from scipy.stats import norm
from numpy import mean, std, linspace
from matplotlib.pyplot import show, hist, grid, legend, xticks, plot

data = norm.rvs(loc = 165, scale = 10, size = 5000)

#copiat de la lab 5
#alpha = ? nu ne trebuie e distributie exponentiala
#data = ? avem
hist(data, bins=14, density = True,range=(130,200), label = 'frecvente relative')


#avem nevoie si de stepsize

x = linspace(130,200,1000)


plot(x,norm.pdf(x,loc=165,scale=10),'r-', label = 'functia de densitate')
#expon.pdf(x,loc=?,scale=?) functia de distributie


xticks(range(130,200,5))
legend(loc = 'upper left')
grid()
show()

data.mean(), mean(data)
#media

data.std(), std(data)
#deviatia standard

sum((data>=160)&(data<=170))/5000
#proportia de valori in intervalul 160,170
mean((data>=160)&(data<=170))



norm.cdf(170,loc=165,scale=10)-norm.cdf(160,loc=165,scale=10)

from scipy.stats import expon, uniform
from numpy import mean, std, multiply

n = 5000
r = uniform.rvs(size = n)
data = expon.rvs(loc = 0, scale = 5, size = n)*(r<0.4) + uniform.rvs(loc = 4, scale = 2, size = n)*(r>=0.4)

from scipy.stats import uniform
from numpy import exp, mean
from scipy.integrate import quad
#3

n = 5000
u = uniform.rvs(loc = -1, scale = 4, size = n)
g = lambda x : exp( -x**2)
mean(4*g(u))
sum(4*g(u)/n)
quad(g, -1, 3)